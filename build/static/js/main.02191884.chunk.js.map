{"version":3,"sources":["components/TodoGroup.tsx","backendInterface/baseInterface.tsx","backendInterface/djangoInterface.tsx","components/Login.tsx","components/CompHeader.tsx","hooks/registerRerender.tsx","components/NewTodo.tsx","components/Todo.tsx","components/PendingTodos.tsx","components/Register.tsx","util/util.tsx","App.tsx","index.tsx"],"names":["getNewId","uuidv4","isGroup","gt","type","globalTodoHandler","todoTree","root","subTreeRoot","onChangedCbDict","initialized","rootId","this","generateNewId","rootGroup","name","parentId","id","childrenIds","createdAt","groupList","todo","newGroup","key","cb","Object","keys","forEach","map","filter","Error","done","Date","changeHappened","parentGroupId","getNewBaseObject","text","newTodo","parent","getParent","push","parId","todoToDelete","el","deleteTodo","groups","currGroup","getGroupListHelper","childId","extTree","getTodoListHelper","currGroupList","currTodo","newList","childTodoId","childTodo","addTodo","testGroupId","addGroup","console","log","BackendInterface","loadedTodos","loadedGroups","groupMap","retTree","convertedGroup","created","parGroup","parent_group_name","child","parent_id","self","init","tt","getAllGroups","parentGroup","parentName","items","values","getTodoList","DEBUG","process","baseUrl","contTypeHeader","storageTokenId","djangoInterface","userData","isLoggedIn","url","requestData","a","fetch","method","headers","body","JSON","stringify","credentials","getPostData","data","loginSuccessful","ok","json","jsonDat","token","userName","username","localStorage","setItem","loadUserData","tok","getItem","parse","todosUrl","get","todos","todoJson","todoGroupsUrl","todoGroups","todoGroupsJson","convertAndInit","getAuthHeader","Authorization","prepareSaving","post","resp","groupsUploaded","respJson","urlItems","respItems","itemsUploaded","saveSuccessful","accoundData","loginUser","removeItem","Login","setLogin","setCreatingAccount","useState","password","cred","setCred","Container","Form","Group","controlId","Label","Control","onChange","e","target","value","Button","onClick","CompHeader","props","useRegisteredRerender","compId","dummy","setDummy","registerOnChanged","NewGroup","useNewTodoComp","input","groupId","NewTodo","title","handleInput","inputRef","useRef","groupRef","Row","className","Col","as","md","placeholder","ref","onChangeCB","newGroupId","current","inputEl","GroupSelect","options","label","selectedOption","setSelectedOption","defaultValue","TodoComponent","groupCrumbs","groupsNotShown","currentGroup","labelStyle","fontSize","marginBottom","paddingBottom","currParentGroups","idx","subGroups","slice","setGroup","concat","style","paddingTop","marginTop","getTextCompNew","doneButt","size","setToDone","buttGroup","ButtonGroup","variant","compareDates","b","NaN","aNum","valueOf","bNum","aLarger","Number","bLarger","isFinite","PendingTodos","todoDict","todoList","completed","openTodos","sort","todoMapper","RegisterPage","setLoggedIn","email","lastname","accDet","setAccDet","onRegister","createAccountAndLogin","userOrNull","delayAtLeast","ms","started","now","res","elapsed","delayFurther","Promise","r","setTimeout","App","logout","initGroup","group","wrappedSetGroup","setGroupAsSelected","getNav","currName","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","save","FullApp","initUser","getUser","initState","state","stateAndUsername","setState","optionalUserName","login","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02191884.chunk.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\r\n\r\ntype TodoType = \"todo\" | \"group\";\r\n\r\n/** Base todo interface.\r\n *\r\n * The id is a UUID that is generated when the object is created.\r\n */\r\ninterface TodoBase {\r\n  id: string;\r\n  parentId: string | null;\r\n  type: TodoType;\r\n  createdAt: Date | null;\r\n}\r\n\r\nexport interface Todo extends TodoBase {\r\n  type: \"todo\";\r\n  text: string;\r\n  done: Date | null;\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface TodoGroup extends TodoBase {\r\n  type: \"group\";\r\n  name: string;\r\n  childrenIds: string[];\r\n}\r\n\r\nexport type GeneralTodo = TodoGroup | Todo;\r\n\r\nexport const getNewId = () => {\r\n  return uuidv4();\r\n};\r\n\r\nexport const isGroup = (gt: GeneralTodo): gt is TodoGroup => {\r\n  return gt.type === \"group\";\r\n};\r\n\r\nexport type TodoTree = { [key: string]: GeneralTodo };\r\n\r\nexport type TodoGroupAndGroups = { todo: TodoGroup; groupList: TodoGroup[] };\r\nexport type TodoAndGroups = { todo: Todo; groupList: TodoGroup[] };\r\ntype TodoListifiedTree = {\r\n  [key: string]: TodoAndGroups;\r\n};\r\n\r\nexport class TodoHandler {\r\n  todoTree: TodoTree;\r\n  root: TodoGroup;\r\n  subTreeRoot: TodoGroupAndGroups;\r\n\r\n  onChangedCbDict: { [key: string]: VoidFunction } = {};\r\n  initialized = false;\r\n\r\n  constructor() {\r\n    // Generate root todo group.\r\n    const rootId = this.generateNewId();\r\n    const rootGroup: TodoGroup = {\r\n      name: \"root\",\r\n      type: \"group\",\r\n      parentId: null,\r\n      id: rootId,\r\n      childrenIds: [],\r\n      createdAt: null,\r\n    };\r\n    this.todoTree = {};\r\n    this.todoTree[rootId] = rootGroup;\r\n    this.root = rootGroup;\r\n    this.subTreeRoot = { groupList: [], todo: rootGroup };\r\n  }\r\n\r\n  setGroupAsSelected(newGroup: TodoGroupAndGroups) {\r\n    this.subTreeRoot = newGroup;\r\n  }\r\n\r\n  registerOnChanged(key: string, cb: VoidFunction) {\r\n    this.onChangedCbDict[key] = cb;\r\n  }\r\n\r\n  private changeHappened() {\r\n    Object.keys(this.onChangedCbDict).forEach((key) => {\r\n      this.onChangedCbDict[key]();\r\n    });\r\n  }\r\n\r\n  getAllGroups() {\r\n    const todos = Object.keys(this.todoTree).map((key) => this.todoTree[key]);\r\n    return todos.filter(isGroup);\r\n  }\r\n\r\n  setToDone(id: string) {\r\n    const todo = this.todoTree[id];\r\n    if (isGroup(todo)) {\r\n      throw new Error(\"This is a bug, cannot set a group to DONE\");\r\n    }\r\n    todo.done = new Date();\r\n    this.changeHappened();\r\n  }\r\n\r\n  generateNewId() {\r\n    return getNewId();\r\n  }\r\n\r\n  init(todoTree: TodoTree, root: TodoGroup) {\r\n    this.todoTree = todoTree;\r\n    this.subTreeRoot = { groupList: [], todo: root };\r\n  }\r\n\r\n  addGroup(name: string, parentGroupId: string | null = null) {\r\n    const newGroup: TodoGroup = {\r\n      ...this.getNewBaseObject(parentGroupId),\r\n      name: name,\r\n      type: \"group\",\r\n      childrenIds: [],\r\n    };\r\n    this.todoTree[newGroup.id] = newGroup;\r\n    this.changeHappened();\r\n    return newGroup.id;\r\n  }\r\n\r\n  addTodo(text: string, parentGroupId: string | null = null) {\r\n    const newTodo: Todo = {\r\n      ...this.getNewBaseObject(parentGroupId),\r\n      text: text,\r\n      done: null,\r\n      type: \"todo\",\r\n    };\r\n\r\n    this.todoTree[newTodo.id] = newTodo;\r\n    this.changeHappened();\r\n    return newTodo.id;\r\n  }\r\n\r\n  private getNewBaseObject(parentGroupId: string | null) {\r\n    const parent = this.getParent(parentGroupId);\r\n    const newTodo = {\r\n      id: this.generateNewId(),\r\n      parentId: parent.id,\r\n      createdAt: new Date(),\r\n    };\r\n    parent.childrenIds.push(newTodo.id);\r\n    return newTodo;\r\n  }\r\n\r\n  private getParent(parentGroupId: string | null) {\r\n    const parId = parentGroupId === null ? this.root.id : parentGroupId;\r\n    const parent = this.todoTree[parId];\r\n    if (!isGroup(parent)) {\r\n      throw new Error(\"Parent is not a group!!\");\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  deleteTodo(id: string) {\r\n    const todoToDelete = this.todoTree[id];\r\n\r\n    // Delete recursively if it is a group\r\n    if (isGroup(todoToDelete)) {\r\n      todoToDelete.childrenIds.forEach((el) => {\r\n        this.deleteTodo(el);\r\n      });\r\n    }\r\n\r\n    // Delete from parent's children\r\n    const parent = this.getParent(todoToDelete.parentId);\r\n    parent.childrenIds = parent.childrenIds.filter((el) => el !== id);\r\n\r\n    // Do the actual delete\r\n    delete this.todoTree[id];\r\n    this.changeHappened();\r\n  }\r\n\r\n  getGroupList() {\r\n    const groups: TodoGroup[] = [this.root];\r\n    const currGroup = this.root;\r\n    this.getGroupListHelper(groups, currGroup);\r\n    return groups;\r\n  }\r\n\r\n  private getGroupListHelper(groups: TodoGroup[], currGroup: TodoGroup) {\r\n    for (const childId of currGroup.childrenIds) {\r\n      const todo = this.todoTree[childId];\r\n      if (isGroup(todo)) {\r\n        groups.push(todo);\r\n        this.getGroupListHelper(groups, todo);\r\n      }\r\n    }\r\n  }\r\n\r\n  getTodoList() {\r\n    const extTree: TodoListifiedTree = {};\r\n    const currGroupList: TodoGroup[] = [];\r\n\r\n    this.getTodoListHelper(extTree, currGroupList, this.subTreeRoot.todo);\r\n    return extTree;\r\n  }\r\n\r\n  private getTodoListHelper(\r\n    extTree: TodoListifiedTree,\r\n    currGroupList: TodoGroup[],\r\n    currTodo: GeneralTodo\r\n  ) {\r\n    if (isGroup(currTodo)) {\r\n      const newList = [...currGroupList, currTodo];\r\n      for (const childTodoId of currTodo.childrenIds) {\r\n        const childTodo = this.todoTree[childTodoId];\r\n        this.getTodoListHelper(extTree, newList, childTodo);\r\n      }\r\n    } else {\r\n      extTree[currTodo.id] = { todo: currTodo, groupList: currGroupList };\r\n    }\r\n  }\r\n}\r\n\r\nexport const globalTodoHandler = new TodoHandler();\r\n\r\n// Add some test data\r\nglobalTodoHandler.addTodo(\"Todo on base level.\");\r\nglobalTodoHandler.addTodo(\"Another test todo.\");\r\nlet testGroupId = globalTodoHandler.addGroup(\"Test Group\");\r\nglobalTodoHandler.addTodo(\"Sample todo in group.\", testGroupId);\r\nglobalTodoHandler.addTodo(\"Another todo.\", testGroupId);\r\n\r\nconsole.log(\"Setting useless data\");\r\ntestGroupId = globalTodoHandler.addGroup(\"Test Group 2\", testGroupId);\r\nglobalTodoHandler.addTodo(\"A todo from the second group.\", testGroupId);\r\nglobalTodoHandler.addTodo(\"Another deeply nested todo.\", testGroupId);\r\nglobalTodoHandler.addTodo(\r\n  \"Another deeply nested todo. This one contains a lot of text such that it needs to be wrapped!\",\r\n  testGroupId\r\n);\r\n","import {\r\n  getNewId,\r\n  globalTodoHandler,\r\n  Todo,\r\n  TodoGroup,\r\n  TodoTree,\r\n} from \"../components/TodoGroup\";\r\nimport { AccountDetails, Credentials } from \"../util/types\";\r\n\r\n/** Todo item as stored on backend.\r\n *\r\n * The id is a number and not used on the frontend.\r\n * Does not have to be set when posted.\r\n */\r\nexport type BackendTodo = {\r\n  created: Date;\r\n  text: string;\r\n  id: number | null;\r\n  done: null | Date;\r\n  parent_group_name: string;\r\n};\r\n\r\n/** TodoGroup as stored on backend.\r\n *\r\n * The backend uses the name of the group as id!\r\n */\r\nexport type BackendTodoGroup = {\r\n  created: Date | null;\r\n  name: string;\r\n  parent_id: string | null;\r\n};\r\n\r\nexport abstract class BackendInterface {\r\n  loadedTodos: null | BackendTodo[] = null;\r\n  loadedGroups: null | BackendTodoGroup[] = null;\r\n\r\n  /** Login user.\r\n   *\r\n   * If successcul, the user data shall be loaded using loadUserData().\r\n   */\r\n  abstract loginUser(credentials: Credentials): Promise<boolean>;\r\n\r\n  /** Returns the currently logged-in user, if any. */\r\n  abstract getUser(): string | null;\r\n  abstract logout(): void;\r\n\r\n  /** Saves the current data to the backend. */\r\n  abstract save(): Promise<boolean>;\r\n\r\n  /** Loads the data and populates the fields loadedTodos and loadedGroups. */\r\n  abstract loadUserData(): Promise<void>;\r\n\r\n  /** Converts the backend structures. */\r\n  convertAndInit() {\r\n    if (this.loadedTodos === null || this.loadedGroups === null) {\r\n      console.log(\"Fuck\");\r\n      return;\r\n    }\r\n    // Mapping from group names to groups\r\n    const groupMap: { [key: string]: TodoGroup } = {};\r\n\r\n    const retTree: TodoTree = {};\r\n\r\n    // Initialize groups without children or parents\r\n    this.loadedGroups.forEach((el) => {\r\n      const id = getNewId();\r\n      const convertedGroup: TodoGroup = {\r\n        createdAt: el.created,\r\n        name: el.name,\r\n        type: \"group\",\r\n        id,\r\n        childrenIds: [],\r\n        parentId: null,\r\n      };\r\n      groupMap[el.name] = convertedGroup;\r\n      retTree[id] = convertedGroup;\r\n    });\r\n\r\n    // Convert todo items and populate group children list\r\n    this.loadedTodos.forEach((el) => {\r\n      const parGroup = groupMap[el.parent_group_name];\r\n      const id = getNewId();\r\n      parGroup.childrenIds.push(id);\r\n      const child: Todo = {\r\n        parentId: parGroup.id,\r\n        id,\r\n        type: \"todo\",\r\n        text: el.text,\r\n        createdAt: el.created,\r\n        done: el.done,\r\n      };\r\n      retTree[id] = child;\r\n    });\r\n\r\n    // Populate parent id / children relationship for groups\r\n    this.loadedGroups.forEach((el) => {\r\n      if (el.parent_id) {\r\n        const parGroup = groupMap[el.parent_id];\r\n        const self = groupMap[el.name];\r\n        self.parentId = parGroup.id;\r\n        parGroup.childrenIds.push(self.id);\r\n      }\r\n    });\r\n\r\n    const root = groupMap[\"root\"];\r\n    globalTodoHandler.init(retTree, root);\r\n  }\r\n\r\n  /** Converts to backend objects. */\r\n  prepareSaving() {\r\n    const tt = globalTodoHandler.todoTree;\r\n\r\n    const groups = globalTodoHandler.getAllGroups();\r\n    this.loadedGroups = groups.map((el) => {\r\n      const parentGroup = el.parentId ? tt[el.parentId] : null;\r\n      let parentName = null;\r\n      if (parentGroup !== null) {\r\n        parentName = (parentGroup as TodoGroup).name;\r\n      }\r\n      return {\r\n        created: el.createdAt,\r\n        name: el.name,\r\n        parent_id: parentName,\r\n      };\r\n    });\r\n\r\n    // Convert items\r\n    const items = Object.values(globalTodoHandler.getTodoList()).map(\r\n      (el) => el.todo\r\n    );\r\n    this.loadedTodos = items.map((el) => {\r\n      const parGroup = tt[el.parentId as string] as TodoGroup;\r\n      return {\r\n        created: el.createdAt,\r\n        text: el.text,\r\n        done: el.done,\r\n        parent_group_name: parGroup.name,\r\n        id: null,\r\n      };\r\n    });\r\n  }\r\n\r\n  /** Creates a user account.\r\n   *\r\n   * Returns null if creation was not successful.\r\n   */\r\n  abstract createAccountAndLogin(\r\n    accoundData: AccountDetails\r\n  ): Promise<string | null>;\r\n}\r\n","import { AccountDetails, Credentials } from \"../util/types\";\r\nimport { BackendInterface } from \"./baseInterface\";\r\n\r\nconst DEBUG = process.env.DEBUG;\r\n\r\n/** Backend url. */\r\nconst baseUrl = DEBUG\r\n  ? \"http://127.0.0.1:8000/\"\r\n  : \"https://chbauman.pythonanywhere.com/\";\r\nconsole.log(\"Debug: \", DEBUG, baseUrl);\r\n\r\nconst contTypeHeader = {\r\n  \"Content-Type\": \"application/json\",\r\n};\r\nconst storageTokenId = \"currUserToken\";\r\n\r\nclass DjangoInterface extends BackendInterface {\r\n  userData: {\r\n    token: string;\r\n    userName: string;\r\n  } | null = null;\r\n\r\n  constructor() {\r\n    super();\r\n    this.isLoggedIn();\r\n  }\r\n\r\n  async getPostData(url: string, requestData: any) {\r\n    return fetch(url, {\r\n      method: \"POST\",\r\n      headers: contTypeHeader,\r\n      body: JSON.stringify(requestData),\r\n    });\r\n  }\r\n\r\n  /** Login a user with the given credentials. */\r\n  async loginUser(credentials: Credentials) {\r\n    const url = `${baseUrl}api-token-auth/`;\r\n    const data = await this.getPostData(url, credentials);\r\n    const loginSuccessful = data.ok;\r\n    if (loginSuccessful) {\r\n      const jsonDat = await data.json();\r\n      const userData = { token: jsonDat.token, userName: credentials.username };\r\n      localStorage.setItem(storageTokenId, JSON.stringify(userData));\r\n      this.userData = userData;\r\n      await this.loadUserData();\r\n    }\r\n    return loginSuccessful;\r\n  }\r\n\r\n  private isLoggedIn() {\r\n    const tok = localStorage.getItem(storageTokenId);\r\n    const isLoggedIn = tok !== null;\r\n    if (isLoggedIn) {\r\n      this.userData = JSON.parse(tok);\r\n    }\r\n    return isLoggedIn;\r\n  }\r\n\r\n  async loadUserData() {\r\n    const todosUrl = `${baseUrl}todo_items/`;\r\n    const todos = await this.get(todosUrl);\r\n    const todoJson = await todos.json();\r\n    if (!todos.ok) {\r\n      console.log(\"Failed to fetch todos\", todoJson);\r\n      return;\r\n    }\r\n    const todoGroupsUrl = `${baseUrl}todo_groups/`;\r\n    const todoGroups = await this.get(todoGroupsUrl);\r\n    const todoGroupsJson = await todoGroups.json();\r\n    if (!todos.ok) {\r\n      console.log(\"Failed to fetch groups\", todoGroupsJson);\r\n      return;\r\n    }\r\n    this.loadedTodos = todoJson;\r\n    this.loadedGroups = todoGroupsJson;\r\n    this.convertAndInit();\r\n  }\r\n\r\n  private async get(url: string) {\r\n    return fetch(url, {\r\n      method: \"GET\",\r\n      headers: this.getAuthHeader(),\r\n    });\r\n  }\r\n\r\n  private async post(url: string, data: any) {\r\n    return fetch(url, {\r\n      method: \"POST\",\r\n      headers: this.getAuthHeader(),\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  private getAuthHeader() {\r\n    if (this.userData === null) {\r\n      throw new Error(\"Not logged in!\");\r\n    }\r\n    return {\r\n      ...contTypeHeader,\r\n      Authorization: `Token ${this.userData?.token}`,\r\n    };\r\n  }\r\n\r\n  async save() {\r\n    this.prepareSaving();\r\n    if (this.loadedGroups === null || this.loadedTodos === null) {\r\n      return false;\r\n    }\r\n    const url = `${baseUrl}todo_groups/`;\r\n    const resp = await this.post(url, this.loadedGroups);\r\n    const groupsUploaded = resp.ok;\r\n    if (!groupsUploaded) {\r\n      const respJson = await resp.json();\r\n      console.log(\"fuck\", resp, this.loadedGroups, respJson);\r\n    }\r\n\r\n    const urlItems = `${baseUrl}todo_items/`;\r\n    const respItems = await this.post(urlItems, this.loadedTodos);\r\n    const itemsUploaded = respItems.ok;\r\n    if (!itemsUploaded) {\r\n      console.log(resp, this.loadedTodos);\r\n    }\r\n    const saveSuccessful = groupsUploaded && itemsUploaded;\r\n    if (!saveSuccessful) {\r\n      console.log(\"Fuck\");\r\n    }\r\n    return saveSuccessful;\r\n  }\r\n\r\n  async createAccountAndLogin(accoundData: AccountDetails) {\r\n    const url = `${baseUrl}create_user/`;\r\n    const data = await this.getPostData(url, accoundData);\r\n    if (!data.ok) {\r\n      return null;\r\n    }\r\n    const loginSucc = await this.loginUser(accoundData);\r\n    if (loginSucc) {\r\n      return accoundData.username;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  logout() {\r\n    this.userData = null;\r\n    localStorage.removeItem(storageTokenId);\r\n  }\r\n\r\n  getUser() {\r\n    if (this.isLoggedIn() && this.userData !== null) {\r\n      return this.userData.userName;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const djangoInterface: BackendInterface = new DjangoInterface();\r\n","import { useState } from \"react\";\r\nimport { Button, Container, Form } from \"react-bootstrap\";\r\nimport { Credentials } from \"../util/types\";\r\n\r\n/** Login component. */\r\nexport const Login = ({\r\n  setLogin,\r\n  setCreatingAccount,\r\n}: {\r\n  setLogin: (c: Credentials) => void;\r\n  setCreatingAccount: (b: boolean) => void;\r\n}) => {\r\n  const [cred, setCred] = useState<Credentials>({ password: \"\", username: \"\" });\r\n\r\n  return (\r\n    <Container>\r\n      <h5>Login</h5>\r\n      <Form>\r\n        <Form.Group controlId=\"formUser\">\r\n          <Form.Label>Enter username:</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            onChange={(e: any) =>\r\n              setCred({ ...cred, username: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formPassword\">\r\n          <Form.Label>Enter password:</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            onChange={(e: any) =>\r\n              setCred({ ...cred, password: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Button onClick={() => setLogin(cred)}>Login</Button>\r\n      </Form>\r\n      <Button onClick={() => setCreatingAccount(true)}>\r\n        Create new account.\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n","export default function CompHeader(props: { text: string }) {\r\n  return <h5>{props.text}</h5>;\r\n}\r\n","import { useState } from \"react\";\r\nimport { globalTodoHandler } from \"../components/TodoGroup\";\r\n\r\nexport const useRegisteredRerender = (compId: string) => {\r\n  // Hack for enforcing re-render when todos change\r\n  const [dummy, setDummy] = useState<number>(0);\r\n  const reRender = () => setDummy(dummy + 1);\r\n  globalTodoHandler.registerOnChanged(compId, reRender);\r\n};\r\n","import { useRef, useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\r\nimport CompHeader from \"./CompHeader\";\r\nimport { globalTodoHandler } from \"./TodoGroup\";\r\nimport { useRegisteredRerender } from \"../hooks/registerRerender\";\r\n\r\n/** Component for adding a new group. */\r\nexport function NewGroup() {\r\n  const handleInput = (input: string, groupId: string | null) =>\r\n    globalTodoHandler.addGroup(input, groupId);\r\n\r\n  return useNewTodoComp(\"New Group:\", handleInput, \"new-group\");\r\n}\r\n\r\n/** Component for adding a new Todo. */\r\nexport function NewTodo() {\r\n  const handleInput = (input: string, groupId: string | null) =>\r\n    globalTodoHandler.addTodo(input, groupId);\r\n\r\n  return useNewTodoComp(\"New task:\", handleInput, \"new-todo\");\r\n}\r\n\r\nconst useNewTodoComp = (\r\n  title: string,\r\n  handleInput: (input: string, groupId: string | null) => void,\r\n  id: string\r\n) => {\r\n  const inputRef = useRef(null);\r\n  const groupRef = useRef<string | null>(null);\r\n  const onGroupChange = (newGroupId: string | null) => {\r\n    groupRef.current = newGroupId;\r\n  };\r\n\r\n  useRegisteredRerender(id);\r\n\r\n  const onAdd = () => {\r\n    const inputEl = inputRef.current as unknown as HTMLInputElement;\r\n    const txt = inputEl.value;\r\n    if (txt !== \"\") {\r\n      handleInput(inputEl.value, groupRef.current);\r\n      inputEl.value = \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row className=\"mt-2\">\r\n        <Col>\r\n          <CompHeader text={title}></CompHeader>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Form.Group as={Col} md={8} controlId={\"text-\" + id}>\r\n          <Form.Control type=\"text\" placeholder=\"Task XYZ\" ref={inputRef} />\r\n        </Form.Group>\r\n        <Form.Group as={Col} md={3} controlId={\"group-select-\" + id}>\r\n          <GroupSelect onChangeCB={onGroupChange} />\r\n        </Form.Group>\r\n        <Form.Group as={Col} md={1} controlId={\"submit-\" + id}>\r\n          <Button onClick={onAdd}>Add</Button>\r\n        </Form.Group>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\ntype GroupSelectOption = { value: string; label: string };\r\n\r\nexport const GroupSelect = ({ onChangeCB }: { onChangeCB: any }) => {\r\n  const datalist = globalTodoHandler.getAllGroups();\r\n  const options = datalist.map((el) => {\r\n    return { value: el.id, label: el.name };\r\n  });\r\n\r\n  useRegisteredRerender(\"groups-selection\");\r\n\r\n  const [selectedOption, setSelectedOption] =\r\n    useState<GroupSelectOption | null>(null);\r\n  const onChange = (el: GroupSelectOption | null) => {\r\n    setSelectedOption(el);\r\n    onChangeCB(el?.value);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      defaultValue={selectedOption}\r\n      onChange={onChange}\r\n      options={options}\r\n    />\r\n  );\r\n};\r\n","import { Button, ButtonGroup, Col, Row } from \"react-bootstrap\";\r\nimport {\r\n  globalTodoHandler,\r\n  Todo,\r\n  TodoGroup,\r\n  TodoGroupAndGroups,\r\n} from \"./TodoGroup\";\r\nimport \"./todo.css\";\r\n\r\nexport const noSpaceStyle = { margin: 0, padding: 0 };\r\n\r\nconst getTextCompNew = (props: any) => {\r\n  const text = props.todo.text;\r\n  const groupsNotShown = props.currentGroup.groupList;\r\n\r\n  const labelStyle = {\r\n    fontSize: \"12px\",\r\n    marginBottom: 0,\r\n    paddingBottom: 0,\r\n  };\r\n  const label = (\r\n    <>\r\n      {props.currParentGroups.map((el: TodoGroup, idx: number) => {\r\n        const onClick = () => {\r\n          const subGroups = props.currParentGroups.slice(0, idx);\r\n          props.setGroup({\r\n            todo: el,\r\n            groupList: groupsNotShown.concat(subGroups),\r\n          });\r\n        };\r\n        const className = idx === 0 ? \"mb-0\" : \"ms-1 mb-0\";\r\n        return (\r\n          <div\r\n            key={el.id}\r\n            className={\"group-list float-start \" + className}\r\n            onClick={onClick}\r\n            style={labelStyle}\r\n          >\r\n            {el.name + \" / \"}\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {label}\r\n      <br></br>\r\n      <div\r\n        className=\"textdiv mb-2\"\r\n        style={{ paddingTop: 0, marginTop: \"-10px\" }}\r\n      >\r\n        {text}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function TodoComponent(props: {\r\n  todo: Todo;\r\n  currParentGroups: TodoGroup[];\r\n  setGroup: (grp: TodoGroupAndGroups) => void;\r\n  currentGroup: TodoGroupAndGroups;\r\n}) {\r\n  // Handle text\r\n  const groupCrumbs = getTextCompNew(props);\r\n\r\n  // Define buttons\r\n  const onDone = () => {\r\n    globalTodoHandler.setToDone(props.todo.id);\r\n  };\r\n  const doneButt = props.todo.done ? null : (\r\n    <Button size=\"sm\" onClick={onDone}>\r\n      Done\r\n    </Button>\r\n  );\r\n  const buttGroup = (\r\n    <ButtonGroup>\r\n      {doneButt}\r\n      <Button\r\n        size=\"sm\"\r\n        variant=\"danger\"\r\n        onClick={() => globalTodoHandler.deleteTodo(props.todo.id)}\r\n      >\r\n        Delete\r\n      </Button>\r\n    </ButtonGroup>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col md={9}>{groupCrumbs}</Col>\r\n        <Col md={3}>{buttGroup}</Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n","import { Col, Row } from \"react-bootstrap\";\r\nimport { useRegisteredRerender } from \"../hooks/registerRerender\";\r\nimport CompHeader from \"./CompHeader\";\r\nimport { TodoComponent } from \"./Todo\";\r\nimport {\r\n  globalTodoHandler,\r\n  TodoAndGroups,\r\n  TodoGroupAndGroups,\r\n} from \"./TodoGroup\";\r\n\r\nconst compareDates = (a: Date | null, b: Date | null) => {\r\n  // Compare two dates (could be of any type supported by the convert\r\n  // function above) and returns:\r\n  //  -1 : if a < b\r\n  //   0 : if a = b\r\n  //   1 : if a > b\r\n  // NaN : if a or b is an illegal date or null\r\n  if (a === null || b === null) {\r\n    return NaN;\r\n  }\r\n  const aNum = a.valueOf();\r\n  const bNum = b.valueOf();\r\n  const aLarger = Number(aNum > bNum);\r\n  const bLarger = Number(aNum < bNum);\r\n  return isFinite(aNum) && isFinite(bNum) ? aLarger - bLarger : NaN;\r\n};\r\n\r\nexport default function PendingTodos(props: {\r\n  setGroup: (grp: TodoGroupAndGroups) => void;\r\n  currentGroup: TodoGroupAndGroups;\r\n}) {\r\n  useRegisteredRerender(\"pending\");\r\n\r\n  const todoDict = globalTodoHandler.getTodoList();\r\n  const todoList = Object.keys(todoDict).map((key) => todoDict[key]);\r\n\r\n  const completed = todoList.filter((el) => el.todo.done !== null);\r\n  const openTodos = todoList.filter((el) => el.todo.done === null);\r\n  openTodos.sort((a, b) => -compareDates(a.todo.createdAt, b.todo.createdAt));\r\n  completed.sort((a, b) => -compareDates(a.todo.done, b.todo.done));\r\n\r\n  const todoMapper = (el: TodoAndGroups) => {\r\n    const todo = el.todo;\r\n    return (\r\n      <TodoComponent\r\n        key={todo.id}\r\n        todo={todo}\r\n        currParentGroups={el.groupList}\r\n        setGroup={props.setGroup}\r\n        currentGroup={props.currentGroup}\r\n      ></TodoComponent>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Row className=\"mt-2\">\r\n      <Col md={8}>\r\n        <CompHeader text={\"Open tasks:\"}></CompHeader>\r\n        {openTodos.map(todoMapper)}\r\n      </Col>\r\n      <Col md={4}>\r\n        <CompHeader text={\"Completed:\"}></CompHeader>\r\n        {completed.map(todoMapper)}\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Button, Form, Container } from \"react-bootstrap\";\r\nimport { djangoInterface } from \"../backendInterface/djangoInterface\";\r\nimport { AccountDetails } from \"../util/types\";\r\n\r\n/** Register new user page. */\r\nexport const RegisterPage = ({\r\n  setCreatingAccount,\r\n  setLoggedIn,\r\n}: {\r\n  setCreatingAccount: (b: boolean) => void;\r\n  setLoggedIn: (s: string | null) => void;\r\n}) => {\r\n  const [accDet, setAccDet] = useState<AccountDetails>({\r\n    password: \"\",\r\n    username: \"\",\r\n    email: \"\",\r\n    lastname: \"\",\r\n  });\r\n\r\n  const onRegister = async () => {\r\n    const userOrNull = await djangoInterface.createAccountAndLogin(accDet);\r\n    if (userOrNull !== null) {\r\n      setCreatingAccount(false);\r\n      setLoggedIn(userOrNull);\r\n    } else {\r\n      console.log(\"Account creation failed!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h5>Create Account</h5>\r\n      <Form>\r\n        <Form.Group controlId=\"formUser\">\r\n          <Form.Label>Username: *</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            onChange={(e: any) =>\r\n              setAccDet({ ...accDet, username: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formEmail\">\r\n          <Form.Label>Email: *</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            onChange={(e: any) =>\r\n              setAccDet({ ...accDet, email: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formLastName\">\r\n          <Form.Label>Last Name:</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            onChange={(e: any) =>\r\n              setAccDet({ ...accDet, lastname: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formPassword\">\r\n          <Form.Label>Password: *</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            onChange={(e: any) =>\r\n              setAccDet({ ...accDet, password: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Button onClick={onRegister}>Create</Button>\r\n      </Form>\r\n      <Button onClick={() => setCreatingAccount(false)}>Back to Login</Button>\r\n    </Container>\r\n  );\r\n};\r\n","/** Delays an async function such that it takes at leas ms milli-seconds.\r\n *\r\n * Does not delay if it is not resolved within that time frame.\r\n */\r\nexport const delayAtLeast = async (cb: () => Promise<any>, ms: number) => {\r\n  const started = Date.now();\r\n  const res = await cb();\r\n  const elapsed = Date.now() - started;\r\n  const delayFurther = ms - elapsed;\r\n  if (delayFurther > 0) {\r\n    await new Promise((r) => setTimeout(r, delayFurther));\r\n  }\r\n  return res;\r\n};\r\n","import { useState } from \"react\";\nimport { Button, Container, Nav, Navbar } from \"react-bootstrap\";\nimport \"./App.css\";\nimport { djangoInterface } from \"./backendInterface/djangoInterface\";\nimport { Login } from \"./components/Login\";\nimport { NewGroup, NewTodo } from \"./components/NewTodo\";\nimport PendingTodos from \"./components/PendingTodos\";\nimport { RegisterPage } from \"./components/Register\";\nimport { globalTodoHandler, TodoGroupAndGroups } from \"./components/TodoGroup\";\nimport { Credentials } from \"./util/types\";\nimport { delayAtLeast } from \"./util/util\";\n\ntype AppState = \"initialized\" | \"login\" | \"load-data\" | \"create-account\";\ntype AppStateData = {\n  state: AppState;\n  userName: string | null;\n};\n\n/** The main app. */\nconst FullApp = () => {\n  const initUser = djangoInterface.getUser();\n\n  let initState: AppState = \"initialized\";\n  if (initUser === null) {\n    initState = \"login\";\n  } else if (!globalTodoHandler.initialized) {\n    initState = \"load-data\";\n  }\n  const [stateAndUsername, setState] = useState<AppStateData>({\n    state: initState,\n    userName: initUser,\n  });\n  const setLoggedIn = (userName: string | null) =>\n    setState({ state: \"initialized\", userName: userName });\n  const optionalUserName = stateAndUsername.userName;\n  const setCreatingAccount = () => {\n    const nextState: AppStateData = {\n      state: \"create-account\",\n      userName: null,\n    };\n    setState(nextState);\n  };\n  const creatingAccount = stateAndUsername.state === \"create-account\";\n\n  // Return create account component\n  if (creatingAccount) {\n    return (\n      <RegisterPage\n        setCreatingAccount={setCreatingAccount}\n        setLoggedIn={setLoggedIn}\n      ></RegisterPage>\n    );\n  }\n\n  // Return login component if user is not logged in\n  if (optionalUserName === null) {\n    const login = async (credentials: Credentials) => {\n      const loginSuccessful = await djangoInterface.loginUser(credentials);\n      if (loginSuccessful) {\n        setLoggedIn(credentials.username);\n      }\n    };\n    return (\n      <Login setLogin={login} setCreatingAccount={setCreatingAccount}></Login>\n    );\n  }\n\n  // Load data from server if todo handler is not initialized\n  if (!globalTodoHandler.initialized) {\n    const loadUserData = async () => {\n      await delayAtLeast(() => djangoInterface.loadUserData(), 400);\n      globalTodoHandler.initialized = true;\n      setState({ ...stateAndUsername, state: \"initialized\" });\n    };\n    loadUserData();\n    return (\n      <Container>\n        <h2>Loading...</h2>\n      </Container>\n    );\n  }\n\n  // Return app component if user is logged in\n  const logout = () => {\n    djangoInterface.logout();\n    setLoggedIn(null);\n  };\n  return <App userName={optionalUserName} logout={logout}></App>;\n};\n\nconst App = ({\n  userName,\n  logout,\n}: {\n  userName: string;\n  logout: VoidFunction;\n}) => {\n  // Group that is currently focused, only sub-elements should be shown\n  // in the lists. Choose the root initially.\n  const initGroup = globalTodoHandler.root;\n  const [group, setGroup] = useState<TodoGroupAndGroups>({\n    todo: initGroup,\n    groupList: [],\n  });\n  const wrappedSetGroup = (group: TodoGroupAndGroups) => {\n    setGroup(group);\n    globalTodoHandler.setGroupAsSelected(group);\n  };\n\n  return (\n    <Container>\n      {getNav(group, wrappedSetGroup, userName, logout)}\n      <NewTodo></NewTodo>\n      <NewGroup></NewGroup>\n      <PendingTodos\n        setGroup={wrappedSetGroup}\n        currentGroup={group}\n      ></PendingTodos>\n    </Container>\n  );\n};\n\n/** Defines the navigation bar. */\nconst getNav = (\n  group: TodoGroupAndGroups,\n  setGroup: any,\n  userName: string,\n  logout: VoidFunction\n) => {\n  const currName = group.todo.name;\n  const groupList = group.groupList;\n\n  return (\n    <Navbar bg=\"light\" expand=\"md\">\n      <Navbar.Brand href=\"/\">{currName}</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"me-auto\">\n          {groupList.map((el, idx) => {\n            const onClick = () => {\n              const subGroups = groupList.slice(0, idx);\n              setGroup({ todo: el, groupList: subGroups });\n            };\n            return (\n              <Nav.Link\n                key={`nav-${el.id}`}\n                onClick={onClick}\n              >{`${el.name} /`}</Nav.Link>\n            );\n          })}\n          <Nav.Link onClick={() => console.log(\"Ignoring your stupid click!\")}>\n            {currName}\n          </Nav.Link>\n        </Nav>\n        <Button onClick={() => djangoInterface.save()}>Save</Button>\n        <Nav>User: {userName}</Nav>\n        <Button onClick={logout}>Logout</Button>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default FullApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}