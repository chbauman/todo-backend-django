{"version":3,"sources":["components/TodoGroup.tsx","backendInterface/baseInterface.tsx","backendInterface/djangoInterface.tsx","components/Login.tsx","components/CompHeader.tsx","hooks/registerRerender.tsx","components/NewTodo.tsx","components/Todo.tsx","components/PendingTodos.tsx","components/Register.tsx","util/util.tsx","App.tsx","index.tsx"],"names":["getNewId","uuidv4","isGroup","gt","type","globalTodoHandler","todoTree","root","subTreeRoot","onChangedCbDict","initialized","this","init","undefined","rootId","generateNewId","rootGroup","name","parentId","id","childrenIds","createdAt","Date","groupList","todo","newGroup","key","cb","Object","keys","forEach","map","filter","Error","done","changeHappened","parentGroupId","getNewBaseObject","text","newTodo","parent","getParent","push","parId","todoToDelete","el","deleteTodo","groups","currGroup","getGroupListHelper","childId","extTree","getTodoListHelper","currGroupList","currTodo","newList","childTodoId","childTodo","BackendInterface","loadedTodos","loadedGroups","groupMap","retTree","convertedGroup","created","parGroup","parent_group_name","child","parent_id","self","console","log","tt","getAllGroups","parentGroup","parentName","items","values","getTodoList","DEBUG","process","baseUrl","contTypeHeader","storageTokenId","djangoInterface","userData","isLoggedIn","url","requestData","a","fetch","method","headers","body","JSON","stringify","credentials","getPostData","data","loginSuccessful","ok","json","jsonDat","token","userName","username","localStorage","setItem","loadUserData","tok","getItem","parse","todosUrl","get","todos","todoJson","todoGroupsUrl","todoGroups","todoGroupsJson","convertAndInit","getAuthHeader","Authorization","prepareSaving","post","resp","groupsUploaded","respJson","urlItems","respItems","itemsUploaded","saveSuccessful","accoundData","loginUser","removeItem","window","Login","setLogin","setCreatingAccount","useState","password","cred","setCred","Container","Form","Group","controlId","Label","Control","onChange","e","target","value","Button","onClick","CompHeader","props","useRegisteredRerender","compId","dummy","setDummy","registerOnChanged","NewGroup","useNewTodoComp","input","groupId","addGroup","NewTodo","addTodo","title","handleInput","inputRef","useRef","groupRef","Row","className","Col","as","md","placeholder","ref","onChangeCB","newGroupId","current","inputEl","GroupSelect","options","label","selectedOption","setSelectedOption","defaultValue","TodoComponent","groupCrumbs","groupsNotShown","currentGroup","labelStyle","fontSize","marginBottom","paddingBottom","currParentGroups","idx","subGroups","slice","setGroup","concat","style","paddingTop","marginTop","getTextCompNew","doneButt","size","setToDone","buttGroup","ButtonGroup","variant","compareDates","b","NaN","aNum","valueOf","bNum","aLarger","Number","bLarger","isFinite","PendingTodos","todoDict","todoList","completed","openTodos","sort","todoMapper","RegisterPage","setLoggedIn","email","lastname","accDet","setAccDet","onRegister","createAccountAndLogin","userOrNull","delayAtLeast","ms","started","now","res","elapsed","delayFurther","Promise","r","setTimeout","App","logout","initGroup","group","wrappedSetGroup","setGroupAsSelected","getNav","currName","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","save","FullApp","initUser","getUser","initState","state","stateAndUsername","setState","optionalUserName","login","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42956c94.chunk.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\r\n\r\ntype TodoType = \"todo\" | \"group\";\r\n\r\n/** Base todo interface.\r\n *\r\n * The id is a UUID that is generated when the object is created.\r\n */\r\ninterface TodoBase {\r\n  id: string;\r\n  parentId: string | null;\r\n  type: TodoType;\r\n  createdAt: Date | null;\r\n}\r\n\r\nexport interface Todo extends TodoBase {\r\n  type: \"todo\";\r\n  text: string;\r\n  done: Date | null;\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface TodoGroup extends TodoBase {\r\n  type: \"group\";\r\n  name: string;\r\n  childrenIds: string[];\r\n}\r\n\r\nexport type GeneralTodo = TodoGroup | Todo;\r\n\r\nexport const getNewId = () => {\r\n  return uuidv4();\r\n};\r\n\r\nexport const isGroup = (gt: GeneralTodo): gt is TodoGroup => {\r\n  return gt.type === \"group\";\r\n};\r\n\r\nexport type TodoTree = { [key: string]: GeneralTodo };\r\n\r\nexport type TodoGroupAndGroups = { todo: TodoGroup; groupList: TodoGroup[] };\r\nexport type TodoAndGroups = { todo: Todo; groupList: TodoGroup[] };\r\ntype TodoListifiedTree = {\r\n  [key: string]: TodoAndGroups;\r\n};\r\n\r\nexport class TodoHandler {\r\n  todoTree!: TodoTree;\r\n  root!: TodoGroup;\r\n  subTreeRoot!: TodoGroupAndGroups;\r\n\r\n  onChangedCbDict: { [key: string]: VoidFunction } = {};\r\n  initialized = false;\r\n\r\n  constructor() {\r\n    // Generate root todo group.\r\n    this.init({});\r\n  }\r\n\r\n  init(todoTree: TodoTree, root?: TodoGroup) {\r\n    if (root === undefined) {\r\n      const rootId = this.generateNewId();\r\n      const rootGroup: TodoGroup = {\r\n        name: \"root\",\r\n        type: \"group\",\r\n        parentId: null,\r\n        id: rootId,\r\n        childrenIds: [],\r\n        createdAt: new Date(),\r\n      };\r\n      this.todoTree = {};\r\n      this.todoTree[rootId] = rootGroup;\r\n      this.root = rootGroup;\r\n      this.subTreeRoot = { groupList: [], todo: rootGroup };\r\n    } else {\r\n      this.todoTree = todoTree;\r\n      this.subTreeRoot = { groupList: [], todo: root };\r\n      this.root = root;\r\n    }\r\n  }\r\n\r\n  setGroupAsSelected(newGroup: TodoGroupAndGroups) {\r\n    this.subTreeRoot = newGroup;\r\n  }\r\n\r\n  registerOnChanged(key: string, cb: VoidFunction) {\r\n    this.onChangedCbDict[key] = cb;\r\n  }\r\n\r\n  private changeHappened() {\r\n    Object.keys(this.onChangedCbDict).forEach((key) => {\r\n      this.onChangedCbDict[key]();\r\n    });\r\n  }\r\n\r\n  getAllGroups() {\r\n    const todos = Object.keys(this.todoTree).map((key) => this.todoTree[key]);\r\n    return todos.filter(isGroup);\r\n  }\r\n\r\n  setToDone(id: string) {\r\n    const todo = this.todoTree[id];\r\n    if (isGroup(todo)) {\r\n      throw new Error(\"This is a bug, cannot set a group to DONE\");\r\n    }\r\n    todo.done = new Date();\r\n    this.changeHappened();\r\n  }\r\n\r\n  generateNewId() {\r\n    return getNewId();\r\n  }\r\n\r\n  addGroup(name: string, parentGroupId: string | null = null) {\r\n    const newGroup: TodoGroup = {\r\n      ...this.getNewBaseObject(parentGroupId),\r\n      name: name,\r\n      type: \"group\",\r\n      childrenIds: [],\r\n    };\r\n    this.todoTree[newGroup.id] = newGroup;\r\n    this.changeHappened();\r\n    return newGroup.id;\r\n  }\r\n\r\n  addTodo(text: string, parentGroupId: string | null = null) {\r\n    const newTodo: Todo = {\r\n      ...this.getNewBaseObject(parentGroupId),\r\n      text: text,\r\n      done: null,\r\n      type: \"todo\",\r\n    };\r\n\r\n    this.todoTree[newTodo.id] = newTodo;\r\n    this.changeHappened();\r\n    return newTodo.id;\r\n  }\r\n\r\n  private getNewBaseObject(parentGroupId: string | null) {\r\n    const parent = this.getParent(parentGroupId);\r\n    const newTodo = {\r\n      id: this.generateNewId(),\r\n      parentId: parent.id,\r\n      createdAt: new Date(),\r\n    };\r\n    parent.childrenIds.push(newTodo.id);\r\n    return newTodo;\r\n  }\r\n\r\n  private getParent(parentGroupId: string | null) {\r\n    const parId = parentGroupId === null ? this.root.id : parentGroupId;\r\n    const parent = this.todoTree[parId];\r\n    if (!isGroup(parent)) {\r\n      throw new Error(\"Parent is not a group!!\");\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  deleteTodo(id: string) {\r\n    const todoToDelete = this.todoTree[id];\r\n\r\n    // Delete recursively if it is a group\r\n    if (isGroup(todoToDelete)) {\r\n      todoToDelete.childrenIds.forEach((el) => {\r\n        this.deleteTodo(el);\r\n      });\r\n    }\r\n\r\n    // Delete from parent's children\r\n    const parent = this.getParent(todoToDelete.parentId);\r\n    parent.childrenIds = parent.childrenIds.filter((el) => el !== id);\r\n\r\n    // Do the actual delete\r\n    delete this.todoTree[id];\r\n    this.changeHappened();\r\n  }\r\n\r\n  getGroupList() {\r\n    const groups: TodoGroup[] = [this.root];\r\n    const currGroup = this.root;\r\n    this.getGroupListHelper(groups, currGroup);\r\n    return groups;\r\n  }\r\n\r\n  private getGroupListHelper(groups: TodoGroup[], currGroup: TodoGroup) {\r\n    for (const childId of currGroup.childrenIds) {\r\n      const todo = this.todoTree[childId];\r\n      if (isGroup(todo)) {\r\n        groups.push(todo);\r\n        this.getGroupListHelper(groups, todo);\r\n      }\r\n    }\r\n  }\r\n\r\n  getTodoList() {\r\n    const extTree: TodoListifiedTree = {};\r\n    const currGroupList: TodoGroup[] = [];\r\n\r\n    this.getTodoListHelper(extTree, currGroupList, this.subTreeRoot.todo);\r\n    return extTree;\r\n  }\r\n\r\n  private getTodoListHelper(\r\n    extTree: TodoListifiedTree,\r\n    currGroupList: TodoGroup[],\r\n    currTodo: GeneralTodo\r\n  ) {\r\n    if (isGroup(currTodo)) {\r\n      const newList = [...currGroupList, currTodo];\r\n      for (const childTodoId of currTodo.childrenIds) {\r\n        const childTodo = this.todoTree[childTodoId];\r\n        this.getTodoListHelper(extTree, newList, childTodo);\r\n      }\r\n    } else {\r\n      extTree[currTodo.id] = { todo: currTodo, groupList: currGroupList };\r\n    }\r\n  }\r\n}\r\n\r\nexport const globalTodoHandler = new TodoHandler();\r\n","import {\r\n  getNewId,\r\n  globalTodoHandler,\r\n  Todo,\r\n  TodoGroup,\r\n  TodoTree,\r\n} from \"../components/TodoGroup\";\r\nimport { AccountDetails, Credentials } from \"../util/types\";\r\n\r\n/** Todo item as stored on backend.\r\n *\r\n * The id is a number and not used on the frontend.\r\n * Does not have to be set when posted.\r\n */\r\nexport type BackendTodo = {\r\n  created: Date;\r\n  text: string;\r\n  id: number | null;\r\n  done: null | Date;\r\n  parent_group_name: string;\r\n};\r\n\r\n/** TodoGroup as stored on backend.\r\n *\r\n * The backend uses the name of the group as id!\r\n */\r\nexport type BackendTodoGroup = {\r\n  created: Date | null;\r\n  name: string;\r\n  parent_id: string | null;\r\n};\r\n\r\nexport abstract class BackendInterface {\r\n  loadedTodos: null | BackendTodo[] = null;\r\n  loadedGroups: null | BackendTodoGroup[] = null;\r\n\r\n  /** Login user.\r\n   *\r\n   * If successcul, the user data shall be loaded using loadUserData().\r\n   */\r\n  abstract loginUser(credentials: Credentials): Promise<boolean>;\r\n\r\n  /** Returns the currently logged-in user, if any. */\r\n  abstract getUser(): string | null;\r\n  abstract logout(): void;\r\n\r\n  /** Saves the current data to the backend. */\r\n  abstract save(): Promise<boolean>;\r\n\r\n  /** Loads the data and populates the fields loadedTodos and loadedGroups. */\r\n  abstract loadUserData(): Promise<void>;\r\n\r\n  /** Converts the backend structures. */\r\n  convertAndInit() {\r\n    if (this.loadedTodos === null || this.loadedGroups === null) {\r\n      console.log(\"Fuck\");\r\n      return;\r\n    }\r\n    // Mapping from group names to groups\r\n    const groupMap: { [key: string]: TodoGroup } = {};\r\n\r\n    const retTree: TodoTree = {};\r\n\r\n    // Initialize groups without children or parents\r\n    this.loadedGroups.forEach((el) => {\r\n      const id = getNewId();\r\n      const convertedGroup: TodoGroup = {\r\n        createdAt: el.created,\r\n        name: el.name,\r\n        type: \"group\",\r\n        id,\r\n        childrenIds: [],\r\n        parentId: null,\r\n      };\r\n      groupMap[el.name] = convertedGroup;\r\n      retTree[id] = convertedGroup;\r\n    });\r\n\r\n    // Convert todo items and populate group children list\r\n    this.loadedTodos.forEach((el) => {\r\n      const parGroup = groupMap[el.parent_group_name];\r\n      const id = getNewId();\r\n      parGroup.childrenIds.push(id);\r\n      const child: Todo = {\r\n        parentId: parGroup.id,\r\n        id,\r\n        type: \"todo\",\r\n        text: el.text,\r\n        createdAt: el.created,\r\n        done: el.done,\r\n      };\r\n      retTree[id] = child;\r\n    });\r\n\r\n    // Populate parent id / children relationship for groups\r\n    this.loadedGroups.forEach((el) => {\r\n      if (el.parent_id) {\r\n        const parGroup = groupMap[el.parent_id];\r\n        const self = groupMap[el.name];\r\n        self.parentId = parGroup.id;\r\n        parGroup.childrenIds.push(self.id);\r\n      }\r\n    });\r\n\r\n    const root = groupMap[\"root\"];\r\n    globalTodoHandler.init(retTree, root);\r\n  }\r\n\r\n  /** Converts to backend objects. */\r\n  prepareSaving() {\r\n    const tt = globalTodoHandler.todoTree;\r\n\r\n    const groups = globalTodoHandler.getAllGroups();\r\n    this.loadedGroups = groups.map((el) => {\r\n      const parentGroup = el.parentId ? tt[el.parentId] : null;\r\n      let parentName = null;\r\n      if (parentGroup !== null) {\r\n        parentName = (parentGroup as TodoGroup).name;\r\n      }\r\n      return {\r\n        created: el.createdAt,\r\n        name: el.name,\r\n        parent_id: parentName,\r\n      };\r\n    });\r\n\r\n    // Convert items\r\n    const items = Object.values(globalTodoHandler.getTodoList()).map(\r\n      (el) => el.todo\r\n    );\r\n    this.loadedTodos = items.map((el) => {\r\n      const parGroup = tt[el.parentId as string] as TodoGroup;\r\n      return {\r\n        created: el.createdAt,\r\n        text: el.text,\r\n        done: el.done,\r\n        parent_group_name: parGroup.name,\r\n        id: null,\r\n      };\r\n    });\r\n  }\r\n\r\n  /** Creates a user account.\r\n   *\r\n   * Returns null if creation was not successful.\r\n   */\r\n  abstract createAccountAndLogin(\r\n    accoundData: AccountDetails\r\n  ): Promise<string | null>;\r\n}\r\n","import { AccountDetails, Credentials } from \"../util/types\";\r\nimport { BackendInterface } from \"./baseInterface\";\r\n\r\nconst DEBUG = process.env.DEBUG;\r\n\r\n/** Backend url. */\r\nconst baseUrl = DEBUG\r\n  ? \"http://127.0.0.1:8000/\"\r\n  : \"https://chbauman.pythonanywhere.com/\";\r\nconsole.log(\"Debug: \", DEBUG, baseUrl);\r\n\r\nconst contTypeHeader = {\r\n  \"Content-Type\": \"application/json\",\r\n};\r\nconst storageTokenId = \"currUserToken\";\r\n\r\nclass DjangoInterface extends BackendInterface {\r\n  userData: {\r\n    token: string;\r\n    userName: string;\r\n  } | null = null;\r\n\r\n  constructor() {\r\n    super();\r\n    this.isLoggedIn();\r\n  }\r\n\r\n  async getPostData(url: string, requestData: any) {\r\n    return fetch(url, {\r\n      method: \"POST\",\r\n      headers: contTypeHeader,\r\n      body: JSON.stringify(requestData),\r\n    });\r\n  }\r\n\r\n  /** Login a user with the given credentials. */\r\n  async loginUser(credentials: Credentials) {\r\n    const url = `${baseUrl}api-token-auth/`;\r\n    const data = await this.getPostData(url, credentials);\r\n    const loginSuccessful = data.ok;\r\n    if (loginSuccessful) {\r\n      const jsonDat = await data.json();\r\n      const userData = { token: jsonDat.token, userName: credentials.username };\r\n      localStorage.setItem(storageTokenId, JSON.stringify(userData));\r\n      this.userData = userData;\r\n      await this.loadUserData();\r\n    }\r\n    return loginSuccessful;\r\n  }\r\n\r\n  private isLoggedIn() {\r\n    const tok = localStorage.getItem(storageTokenId);\r\n    const isLoggedIn = tok !== null;\r\n    if (isLoggedIn) {\r\n      this.userData = JSON.parse(tok);\r\n    }\r\n    return isLoggedIn;\r\n  }\r\n\r\n  async loadUserData() {\r\n    const todosUrl = `${baseUrl}todo_items/`;\r\n    const todos = await this.get(todosUrl);\r\n    const todoJson = await todos.json();\r\n    if (!todos.ok) {\r\n      console.log(\"Failed to fetch todos\", todoJson);\r\n      return;\r\n    }\r\n    const todoGroupsUrl = `${baseUrl}todo_groups/`;\r\n    const todoGroups = await this.get(todoGroupsUrl);\r\n    const todoGroupsJson = await todoGroups.json();\r\n    if (!todos.ok) {\r\n      console.log(\"Failed to fetch groups\", todoGroupsJson);\r\n      return;\r\n    }\r\n    this.loadedTodos = todoJson;\r\n    this.loadedGroups = todoGroupsJson;\r\n    this.convertAndInit();\r\n  }\r\n\r\n  private async get(url: string) {\r\n    return fetch(url, {\r\n      method: \"GET\",\r\n      headers: this.getAuthHeader(),\r\n    });\r\n  }\r\n\r\n  private async post(url: string, data: any) {\r\n    return fetch(url, {\r\n      method: \"POST\",\r\n      headers: this.getAuthHeader(),\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  private getAuthHeader() {\r\n    if (this.userData === null) {\r\n      throw new Error(\"Not logged in!\");\r\n    }\r\n    return {\r\n      ...contTypeHeader,\r\n      Authorization: `Token ${this.userData?.token}`,\r\n    };\r\n  }\r\n\r\n  async save() {\r\n    this.prepareSaving();\r\n    if (this.loadedGroups === null || this.loadedTodos === null) {\r\n      return false;\r\n    }\r\n    const url = `${baseUrl}todo_groups/`;\r\n    const resp = await this.post(url, this.loadedGroups);\r\n    const groupsUploaded = resp.ok;\r\n    if (!groupsUploaded) {\r\n      const respJson = await resp.json();\r\n      console.log(\"fuck\", resp, this.loadedGroups, respJson);\r\n    }\r\n\r\n    const urlItems = `${baseUrl}todo_items/`;\r\n    const respItems = await this.post(urlItems, this.loadedTodos);\r\n    const itemsUploaded = respItems.ok;\r\n    if (!itemsUploaded) {\r\n      console.log(resp, this.loadedTodos);\r\n    }\r\n    const saveSuccessful = groupsUploaded && itemsUploaded;\r\n    if (!saveSuccessful) {\r\n      console.log(\"Fuck\");\r\n    }\r\n    return saveSuccessful;\r\n  }\r\n\r\n  async createAccountAndLogin(accoundData: AccountDetails) {\r\n    const url = `${baseUrl}create_user/`;\r\n    const data = await this.getPostData(url, accoundData);\r\n    if (!data.ok) {\r\n      return null;\r\n    }\r\n    const loginSucc = await this.loginUser(accoundData);\r\n    if (loginSucc) {\r\n      return accoundData.username;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  logout() {\r\n    this.userData = null;\r\n    localStorage.removeItem(storageTokenId);\r\n  }\r\n\r\n  getUser() {\r\n    if (this.isLoggedIn() && this.userData !== null) {\r\n      return this.userData.userName;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const djangoInterface: BackendInterface = new DjangoInterface();\r\n(window as any).djangoInterface = djangoInterface;\r\n","import { useState } from \"react\";\r\nimport { Button, Container, Form } from \"react-bootstrap\";\r\nimport { Credentials } from \"../util/types\";\r\n\r\n/** Login component. */\r\nexport const Login = ({\r\n  setLogin,\r\n  setCreatingAccount,\r\n}: {\r\n  setLogin: (c: Credentials) => void;\r\n  setCreatingAccount: (b: boolean) => void;\r\n}) => {\r\n  const [cred, setCred] = useState<Credentials>({ password: \"\", username: \"\" });\r\n\r\n  return (\r\n    <Container>\r\n      <h5>Login</h5>\r\n      <Form>\r\n        <Form.Group controlId=\"formUser\">\r\n          <Form.Label>Enter username:</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            onChange={(e: any) =>\r\n              setCred({ ...cred, username: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formPassword\">\r\n          <Form.Label>Enter password:</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            onChange={(e: any) =>\r\n              setCred({ ...cred, password: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Button onClick={() => setLogin(cred)}>Login</Button>\r\n      </Form>\r\n      <Button onClick={() => setCreatingAccount(true)}>\r\n        Create new account.\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n","export default function CompHeader(props: { text: string }) {\r\n  return <h5>{props.text}</h5>;\r\n}\r\n","import { useState } from \"react\";\r\nimport { globalTodoHandler } from \"../components/TodoGroup\";\r\n\r\nexport const useRegisteredRerender = (compId: string) => {\r\n  // Hack for enforcing re-render when todos change\r\n  const [dummy, setDummy] = useState<number>(0);\r\n  const reRender = () => setDummy(dummy + 1);\r\n  globalTodoHandler.registerOnChanged(compId, reRender);\r\n};\r\n","import { useRef, useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\r\nimport CompHeader from \"./CompHeader\";\r\nimport { globalTodoHandler } from \"./TodoGroup\";\r\nimport { useRegisteredRerender } from \"../hooks/registerRerender\";\r\n\r\n/** Component for adding a new group. */\r\nexport function NewGroup() {\r\n  const handleInput = (input: string, groupId: string | null) =>\r\n    globalTodoHandler.addGroup(input, groupId);\r\n\r\n  return useNewTodoComp(\"New Group:\", handleInput, \"new-group\");\r\n}\r\n\r\n/** Component for adding a new Todo. */\r\nexport function NewTodo() {\r\n  const handleInput = (input: string, groupId: string | null) =>\r\n    globalTodoHandler.addTodo(input, groupId);\r\n\r\n  return useNewTodoComp(\"New task:\", handleInput, \"new-todo\");\r\n}\r\n\r\nconst useNewTodoComp = (\r\n  title: string,\r\n  handleInput: (input: string, groupId: string | null) => void,\r\n  id: string\r\n) => {\r\n  const inputRef = useRef(null);\r\n  const groupRef = useRef<string | null>(null);\r\n  const onGroupChange = (newGroupId: string | null) => {\r\n    groupRef.current = newGroupId;\r\n  };\r\n\r\n  useRegisteredRerender(id);\r\n\r\n  const onAdd = () => {\r\n    const inputEl = inputRef.current as unknown as HTMLInputElement;\r\n    const txt = inputEl.value;\r\n    if (txt !== \"\") {\r\n      handleInput(inputEl.value, groupRef.current);\r\n      inputEl.value = \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row className=\"mt-2\">\r\n        <Col>\r\n          <CompHeader text={title}></CompHeader>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Form.Group as={Col} md={8} controlId={\"text-\" + id}>\r\n          <Form.Control type=\"text\" placeholder=\"Task XYZ\" ref={inputRef} />\r\n        </Form.Group>\r\n        <Form.Group as={Col} md={3} controlId={\"group-select-\" + id}>\r\n          <GroupSelect onChangeCB={onGroupChange} />\r\n        </Form.Group>\r\n        <Form.Group as={Col} md={1} controlId={\"submit-\" + id}>\r\n          <Button onClick={onAdd}>Add</Button>\r\n        </Form.Group>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\ntype GroupSelectOption = { value: string; label: string };\r\n\r\nexport const GroupSelect = ({ onChangeCB }: { onChangeCB: any }) => {\r\n  const datalist = globalTodoHandler.getAllGroups();\r\n  const options = datalist.map((el) => {\r\n    return { value: el.id, label: el.name };\r\n  });\r\n\r\n  useRegisteredRerender(\"groups-selection\");\r\n\r\n  const [selectedOption, setSelectedOption] =\r\n    useState<GroupSelectOption | null>(null);\r\n  const onChange = (el: GroupSelectOption | null) => {\r\n    setSelectedOption(el);\r\n    onChangeCB(el?.value);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      defaultValue={selectedOption}\r\n      onChange={onChange}\r\n      options={options}\r\n    />\r\n  );\r\n};\r\n","import { Button, ButtonGroup, Col, Row } from \"react-bootstrap\";\r\nimport {\r\n  globalTodoHandler,\r\n  Todo,\r\n  TodoGroup,\r\n  TodoGroupAndGroups,\r\n} from \"./TodoGroup\";\r\nimport \"./todo.css\";\r\n\r\nexport const noSpaceStyle = { margin: 0, padding: 0 };\r\n\r\nconst getTextCompNew = (props: any) => {\r\n  const text = props.todo.text;\r\n  const groupsNotShown = props.currentGroup.groupList;\r\n\r\n  const labelStyle = {\r\n    fontSize: \"12px\",\r\n    marginBottom: 0,\r\n    paddingBottom: 0,\r\n  };\r\n  const label = (\r\n    <>\r\n      {props.currParentGroups.map((el: TodoGroup, idx: number) => {\r\n        const onClick = () => {\r\n          const subGroups = props.currParentGroups.slice(0, idx);\r\n          props.setGroup({\r\n            todo: el,\r\n            groupList: groupsNotShown.concat(subGroups),\r\n          });\r\n        };\r\n        const className = idx === 0 ? \"mb-0\" : \"ms-1 mb-0\";\r\n        return (\r\n          <div\r\n            key={el.id}\r\n            className={\"group-list float-start \" + className}\r\n            onClick={onClick}\r\n            style={labelStyle}\r\n          >\r\n            {el.name + \" / \"}\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {label}\r\n      <br></br>\r\n      <div\r\n        className=\"textdiv mb-2\"\r\n        style={{ paddingTop: 0, marginTop: \"-10px\" }}\r\n      >\r\n        {text}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function TodoComponent(props: {\r\n  todo: Todo;\r\n  currParentGroups: TodoGroup[];\r\n  setGroup: (grp: TodoGroupAndGroups) => void;\r\n  currentGroup: TodoGroupAndGroups;\r\n}) {\r\n  // Handle text\r\n  const groupCrumbs = getTextCompNew(props);\r\n\r\n  // Define buttons\r\n  const onDone = () => {\r\n    globalTodoHandler.setToDone(props.todo.id);\r\n  };\r\n  const doneButt = props.todo.done ? null : (\r\n    <Button size=\"sm\" onClick={onDone}>\r\n      Done\r\n    </Button>\r\n  );\r\n  const buttGroup = (\r\n    <ButtonGroup>\r\n      {doneButt}\r\n      <Button\r\n        size=\"sm\"\r\n        variant=\"danger\"\r\n        onClick={() => globalTodoHandler.deleteTodo(props.todo.id)}\r\n      >\r\n        Delete\r\n      </Button>\r\n    </ButtonGroup>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col md={9}>{groupCrumbs}</Col>\r\n        <Col md={3}>{buttGroup}</Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n","import { Col, Row } from \"react-bootstrap\";\r\nimport { useRegisteredRerender } from \"../hooks/registerRerender\";\r\nimport CompHeader from \"./CompHeader\";\r\nimport { TodoComponent } from \"./Todo\";\r\nimport {\r\n  globalTodoHandler,\r\n  TodoAndGroups,\r\n  TodoGroupAndGroups,\r\n} from \"./TodoGroup\";\r\n\r\nconst compareDates = (a: Date | null, b: Date | null) => {\r\n  // Compare two dates (could be of any type supported by the convert\r\n  // function above) and returns:\r\n  //  -1 : if a < b\r\n  //   0 : if a = b\r\n  //   1 : if a > b\r\n  // NaN : if a or b is an illegal date or null\r\n  if (a === null || b === null) {\r\n    return NaN;\r\n  }\r\n  const aNum = a.valueOf();\r\n  const bNum = b.valueOf();\r\n  const aLarger = Number(aNum > bNum);\r\n  const bLarger = Number(aNum < bNum);\r\n  return isFinite(aNum) && isFinite(bNum) ? aLarger - bLarger : NaN;\r\n};\r\n\r\nexport default function PendingTodos(props: {\r\n  setGroup: (grp: TodoGroupAndGroups) => void;\r\n  currentGroup: TodoGroupAndGroups;\r\n}) {\r\n  useRegisteredRerender(\"pending\");\r\n\r\n  const todoDict = globalTodoHandler.getTodoList();\r\n  const todoList = Object.keys(todoDict).map((key) => todoDict[key]);\r\n\r\n  const completed = todoList.filter((el) => el.todo.done !== null);\r\n  const openTodos = todoList.filter((el) => el.todo.done === null);\r\n  openTodos.sort((a, b) => -compareDates(a.todo.createdAt, b.todo.createdAt));\r\n  completed.sort((a, b) => -compareDates(a.todo.done, b.todo.done));\r\n\r\n  const todoMapper = (el: TodoAndGroups) => {\r\n    const todo = el.todo;\r\n    return (\r\n      <TodoComponent\r\n        key={todo.id}\r\n        todo={todo}\r\n        currParentGroups={el.groupList}\r\n        setGroup={props.setGroup}\r\n        currentGroup={props.currentGroup}\r\n      ></TodoComponent>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Row className=\"mt-2\">\r\n      <Col md={8}>\r\n        <CompHeader text={\"Open tasks:\"}></CompHeader>\r\n        {openTodos.map(todoMapper)}\r\n      </Col>\r\n      <Col md={4}>\r\n        <CompHeader text={\"Completed:\"}></CompHeader>\r\n        {completed.map(todoMapper)}\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Button, Form, Container } from \"react-bootstrap\";\r\nimport { djangoInterface } from \"../backendInterface/djangoInterface\";\r\nimport { AccountDetails } from \"../util/types\";\r\n\r\n/** Register new user page. */\r\nexport const RegisterPage = ({\r\n  setCreatingAccount,\r\n  setLoggedIn,\r\n}: {\r\n  setCreatingAccount: (b: boolean) => void;\r\n  setLoggedIn: (s: string | null) => void;\r\n}) => {\r\n  const [accDet, setAccDet] = useState<AccountDetails>({\r\n    password: \"\",\r\n    username: \"\",\r\n    email: \"\",\r\n    lastname: \"\",\r\n  });\r\n\r\n  const onRegister = async () => {\r\n    const userOrNull = await djangoInterface.createAccountAndLogin(accDet);\r\n    if (userOrNull !== null) {\r\n      setCreatingAccount(false);\r\n      setLoggedIn(userOrNull);\r\n    } else {\r\n      console.log(\"Account creation failed!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h5>Create Account</h5>\r\n      <Form>\r\n        <Form.Group controlId=\"formUser\">\r\n          <Form.Label>Username: *</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            onChange={(e: any) =>\r\n              setAccDet({ ...accDet, username: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formEmail\">\r\n          <Form.Label>Email: *</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            onChange={(e: any) =>\r\n              setAccDet({ ...accDet, email: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formLastName\">\r\n          <Form.Label>Last Name:</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            onChange={(e: any) =>\r\n              setAccDet({ ...accDet, lastname: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formPassword\">\r\n          <Form.Label>Password: *</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            onChange={(e: any) =>\r\n              setAccDet({ ...accDet, password: e.target.value })\r\n            }\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Button onClick={onRegister}>Create</Button>\r\n      </Form>\r\n      <Button onClick={() => setCreatingAccount(false)}>Back to Login</Button>\r\n    </Container>\r\n  );\r\n};\r\n","/** Delays an async function such that it takes at leas ms milli-seconds.\r\n *\r\n * Does not delay if it is not resolved within that time frame.\r\n */\r\nexport const delayAtLeast = async (cb: () => Promise<any>, ms: number) => {\r\n  const started = Date.now();\r\n  const res = await cb();\r\n  const elapsed = Date.now() - started;\r\n  const delayFurther = ms - elapsed;\r\n  if (delayFurther > 0) {\r\n    await new Promise((r) => setTimeout(r, delayFurther));\r\n  }\r\n  return res;\r\n};\r\n","import { useState } from \"react\";\nimport { Button, Container, Nav, Navbar } from \"react-bootstrap\";\nimport \"./App.css\";\nimport { djangoInterface } from \"./backendInterface/djangoInterface\";\nimport { Login } from \"./components/Login\";\nimport { NewGroup, NewTodo } from \"./components/NewTodo\";\nimport PendingTodos from \"./components/PendingTodos\";\nimport { RegisterPage } from \"./components/Register\";\nimport { globalTodoHandler, TodoGroupAndGroups } from \"./components/TodoGroup\";\nimport { Credentials } from \"./util/types\";\nimport { delayAtLeast } from \"./util/util\";\n\ntype AppState = \"initialized\" | \"login\" | \"load-data\" | \"create-account\";\ntype AppStateData = {\n  state: AppState;\n  userName: string | null;\n};\n\n/** The main app. */\nconst FullApp = () => {\n  const initUser = djangoInterface.getUser();\n\n  let initState: AppState = \"initialized\";\n  if (initUser === null) {\n    initState = \"login\";\n  } else if (!globalTodoHandler.initialized) {\n    initState = \"load-data\";\n  }\n  const [stateAndUsername, setState] = useState<AppStateData>({\n    state: initState,\n    userName: initUser,\n  });\n  const setLoggedIn = (userName: string | null) =>\n    setState({ state: \"initialized\", userName: userName });\n  const optionalUserName = stateAndUsername.userName;\n  const setCreatingAccount = () => {\n    const nextState: AppStateData = {\n      state: \"create-account\",\n      userName: null,\n    };\n    setState(nextState);\n  };\n  const creatingAccount = stateAndUsername.state === \"create-account\";\n\n  // Return create account component\n  if (creatingAccount) {\n    return (\n      <RegisterPage\n        setCreatingAccount={setCreatingAccount}\n        setLoggedIn={setLoggedIn}\n      ></RegisterPage>\n    );\n  }\n\n  // Return login component if user is not logged in\n  if (optionalUserName === null) {\n    const login = async (credentials: Credentials) => {\n      const loginSuccessful = await djangoInterface.loginUser(credentials);\n      if (loginSuccessful) {\n        setLoggedIn(credentials.username);\n      }\n    };\n    return (\n      <Login setLogin={login} setCreatingAccount={setCreatingAccount}></Login>\n    );\n  }\n\n  // Load data from server if todo handler is not initialized\n  if (!globalTodoHandler.initialized) {\n    const loadUserData = async () => {\n      await delayAtLeast(() => djangoInterface.loadUserData(), 400);\n      globalTodoHandler.initialized = true;\n      setState({ ...stateAndUsername, state: \"initialized\" });\n    };\n    loadUserData();\n    return (\n      <Container>\n        <h2>Loading...</h2>\n      </Container>\n    );\n  }\n\n  // Return app component if user is logged in\n  const logout = () => {\n    djangoInterface.logout();\n    setLoggedIn(null);\n  };\n  return <App userName={optionalUserName} logout={logout}></App>;\n};\n\nconst App = ({\n  userName,\n  logout,\n}: {\n  userName: string;\n  logout: VoidFunction;\n}) => {\n  // Group that is currently focused, only sub-elements should be shown\n  // in the lists. Choose the root initially.\n  const initGroup = globalTodoHandler.root;\n  const [group, setGroup] = useState<TodoGroupAndGroups>({\n    todo: initGroup,\n    groupList: [],\n  });\n  const wrappedSetGroup = (group: TodoGroupAndGroups) => {\n    setGroup(group);\n    globalTodoHandler.setGroupAsSelected(group);\n  };\n\n  return (\n    <Container>\n      {getNav(group, wrappedSetGroup, userName, logout)}\n      <NewTodo></NewTodo>\n      <NewGroup></NewGroup>\n      <PendingTodos\n        setGroup={wrappedSetGroup}\n        currentGroup={group}\n      ></PendingTodos>\n    </Container>\n  );\n};\n\n/** Defines the navigation bar. */\nconst getNav = (\n  group: TodoGroupAndGroups,\n  setGroup: any,\n  userName: string,\n  logout: VoidFunction\n) => {\n  const currName = group.todo.name;\n  const groupList = group.groupList;\n\n  return (\n    <Navbar bg=\"light\" expand=\"md\">\n      <Navbar.Brand href=\"/\">{currName}</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"me-auto\">\n          {groupList.map((el, idx) => {\n            const onClick = () => {\n              const subGroups = groupList.slice(0, idx);\n              setGroup({ todo: el, groupList: subGroups });\n            };\n            return (\n              <Nav.Link\n                key={`nav-${el.id}`}\n                onClick={onClick}\n              >{`${el.name} /`}</Nav.Link>\n            );\n          })}\n          <Nav.Link onClick={() => console.log(\"Ignoring your stupid click!\")}>\n            {currName}\n          </Nav.Link>\n        </Nav>\n        <Button onClick={() => djangoInterface.save()}>Save</Button>\n        <Nav>User: {userName}</Nav>\n        <Button onClick={logout}>Logout</Button>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default FullApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}